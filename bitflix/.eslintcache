[{"C:\\Users\\Bit\\Desktop\\bit-react\\bitflix\\src\\index.js":"1","C:\\Users\\Bit\\Desktop\\bit-react\\bitflix\\src\\components\\App.js":"2","C:\\Users\\Bit\\Desktop\\bit-react\\bitflix\\src\\components\\GlobalStyles.js":"3","C:\\Users\\Bit\\Desktop\\bit-react\\bitflix\\src\\components\\Router.js":"4","C:\\Users\\Bit\\Desktop\\bit-react\\bitflix\\src\\components\\Header.js":"5","C:\\Users\\Bit\\Desktop\\bit-react\\bitflix\\src\\routes\\Home\\index.js":"6","C:\\Users\\Bit\\Desktop\\bit-react\\bitflix\\src\\routes\\TV\\index.js":"7","C:\\Users\\Bit\\Desktop\\bit-react\\bitflix\\src\\routes\\Search\\index.js":"8","C:\\Users\\Bit\\Desktop\\bit-react\\bitflix\\src\\routes\\Detail\\index.js":"9","C:\\Users\\Bit\\Desktop\\bit-react\\bitflix\\src\\routes\\Home\\HomeContainer.js":"10","C:\\Users\\Bit\\Desktop\\bit-react\\bitflix\\src\\routes\\Search\\SearchContainer.js":"11","C:\\Users\\Bit\\Desktop\\bit-react\\bitflix\\src\\routes\\TV\\TvContainer.js":"12","C:\\Users\\Bit\\Desktop\\bit-react\\bitflix\\src\\routes\\Detail\\DetailContainer.js":"13","C:\\Users\\Bit\\Desktop\\bit-react\\bitflix\\src\\routes\\Home\\HomePresenter.js":"14","C:\\Users\\Bit\\Desktop\\bit-react\\bitflix\\src\\routes\\TV\\TvPresenter.js":"15","C:\\Users\\Bit\\Desktop\\bit-react\\bitflix\\src\\routes\\Search\\SearchPresenter.js":"16","C:\\Users\\Bit\\Desktop\\bit-react\\bitflix\\src\\routes\\Detail\\DetailPresenter.js":"17","C:\\Users\\Bit\\Desktop\\bit-react\\bitflix\\src\\api.js":"18","C:\\Users\\Bit\\Desktop\\bit-react\\bitflix\\src\\components\\Section.js":"19","C:\\Users\\Bit\\Desktop\\bit-react\\bitflix\\src\\components\\Message.js":"20","C:\\Users\\Bit\\Desktop\\bit-react\\bitflix\\src\\components\\Poster.js":"21","C:\\Users\\Bit\\Desktop\\bit-react\\bitflix\\src\\components\\Loader.js":"22"},{"size":208,"mtime":1606873625966,"results":"23","hashOfConfig":"24"},{"size":185,"mtime":1606877616099,"results":"25","hashOfConfig":"24"},{"size":583,"mtime":1606877624872,"results":"26","hashOfConfig":"24"},{"size":942,"mtime":1606882594549,"results":"27","hashOfConfig":"24"},{"size":1539,"mtime":1606883292031,"results":"28","hashOfConfig":"24"},{"size":79,"mtime":1606881937349,"results":"29","hashOfConfig":"24"},{"size":73,"mtime":1606876948070,"results":"30","hashOfConfig":"24"},{"size":85,"mtime":1606876948730,"results":"31","hashOfConfig":"24"},{"size":85,"mtime":1606876945118,"results":"32","hashOfConfig":"24"},{"size":2155,"mtime":1606886167425,"results":"33","hashOfConfig":"24"},{"size":2308,"mtime":1606958749668,"results":"34","hashOfConfig":"24"},{"size":2176,"mtime":1606891261740,"results":"35","hashOfConfig":"24"},{"size":1748,"mtime":1606894876594,"results":"36","hashOfConfig":"24"},{"size":2658,"mtime":1606887966172,"results":"37","hashOfConfig":"24"},{"size":2636,"mtime":1606891462651,"results":"38","hashOfConfig":"24"},{"size":2631,"mtime":1606958759998,"results":"39","hashOfConfig":"24"},{"size":3340,"mtime":1606894807777,"results":"40","hashOfConfig":"24"},{"size":1052,"mtime":1606877522228,"results":"41","hashOfConfig":"24"},{"size":747,"mtime":1606883701204,"results":"42","hashOfConfig":"24"},{"size":570,"mtime":1606883625940,"results":"43","hashOfConfig":"24"},{"size":1863,"mtime":1606890565393,"results":"44","hashOfConfig":"24"},{"size":383,"mtime":1606883563503,"results":"45","hashOfConfig":"24"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},"c7smys",{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"48"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"48"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"71","messages":"72","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"48"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"48"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"48"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"48"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},"C:\\Users\\Bit\\Desktop\\bit-react\\bitflix\\src\\index.js",[],["97","98"],"C:\\Users\\Bit\\Desktop\\bit-react\\bitflix\\src\\components\\App.js",[],"C:\\Users\\Bit\\Desktop\\bit-react\\bitflix\\src\\components\\GlobalStyles.js",[],"C:\\Users\\Bit\\Desktop\\bit-react\\bitflix\\src\\components\\Router.js",["99"],"import React from \"react\";\r\nimport { HashRouter as Router, Route, Switch } from \"react-router-dom\";\r\nimport Header from \"./Header\";\r\n\r\nimport Home from \"../routes/Home\";\r\nimport TV from \"../routes/TV\";\r\nimport Search from \"../routes/Search\";\r\nimport Detail from \"../routes/Detail\";\r\n// 오로지 라우터만 관리하는 컴포넌트가 될 것 이다.\r\nexport default () => (\r\n  <Router>\r\n    <>\r\n      <Header />\r\n      {/* 기본적으로 Switch가 없이 라우터를 배치하면 모든 라우터를 탄다.\r\n    Switch를 활용하면 오로지 하나의 라우터만 타게된다.\r\n    */}\r\n      <Switch>\r\n        <Route path=\"/\" exact component={Home} />\r\n        <Route path=\"/tv\" exact component={TV} />\r\n        <Route path=\"/search\" exact component={Search} />\r\n        <Route path=\"/movie/:id\" exact component={Detail} />\r\n        <Route path=\"/show/:id\" exact component={Detail} />\r\n      </Switch>\r\n    </>\r\n  </Router>\r\n);\r\n","C:\\Users\\Bit\\Desktop\\bit-react\\bitflix\\src\\components\\Header.js",[],"C:\\Users\\Bit\\Desktop\\bit-react\\bitflix\\src\\routes\\Home\\index.js",[],"C:\\Users\\Bit\\Desktop\\bit-react\\bitflix\\src\\routes\\TV\\index.js",[],"C:\\Users\\Bit\\Desktop\\bit-react\\bitflix\\src\\routes\\Search\\index.js",[],"C:\\Users\\Bit\\Desktop\\bit-react\\bitflix\\src\\routes\\Detail\\index.js",[],"C:\\Users\\Bit\\Desktop\\bit-react\\bitflix\\src\\routes\\Home\\HomeContainer.js",["100","101"],"import React from \"react\";\r\nimport HomePresenter from \"./HomePresenter\";\r\nimport { moviesApi } from \"../../api\";\r\n\r\n// Container의 역할 : Application에서 사용되어지는 기능(함수), 상태(state), 이벤트 등을\r\n// 구현하고, Presenter에 전달\r\n\r\nexport default class extends React.Component {\r\n  // 클래스형 컴포넌트에서 state 만들기\r\n  state = {\r\n    nowPlaying: null,\r\n    upcoming: null,\r\n    popular: null,\r\n    error: null,\r\n    loading: true,\r\n  };\r\n\r\n  // constructor : 클래스 생성자\r\n  //  생성자의 매개변수로 부모 컴포넌트의 props가 들어온다.\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n\r\n  // 컴포넌트가 부모 컴포넌트에 마운트 됐을 때 호출되는 함수\r\n  // useEffect(()=>(), [])와 같다.\r\n\r\n  // useEffect 에서의 비동기처리와는 다르게, 클래스형 컴포넌트의 componentDidMount에서의\r\n  // 비동기 처리는 앞에 async 키워드를 붙여주면 된다.\r\n  async componentDidMount() {\r\n    try {\r\n      // data -> results에 원하는 내용이 있었음\r\n      // data : { results : [{}, {}, {}, ...]}\r\n\r\n      // data안에 있는 results에 들어있는 값을 nowPlaying 변수에 넣겠다.\r\n      const {\r\n        data: { results: nowPlaying },\r\n      } = await moviesApi.nowPlaying();\r\n\r\n      const {\r\n        data: { results: upcoming },\r\n      } = await moviesApi.upcoming();\r\n      const {\r\n        data: { results: popular },\r\n      } = await moviesApi.popular();\r\n\r\n      this.setState({\r\n        nowPlaying,\r\n        upcoming,\r\n        popular,\r\n      });\r\n    } catch (error) {\r\n      this.setState({\r\n        error: \"영화 정보를 찾을 수 없습니다.\",\r\n      });\r\n    } finally {\r\n      this.setState({\r\n        loading: false,\r\n      });\r\n    }\r\n  }\r\n\r\n  // 함수형 컴포넌트에서 return에 해당 된다.\r\n  render() {\r\n    const { nowPlaying, upcoming, popular, error, loading } = this.state;\r\n\r\n    return (\r\n      <HomePresenter\r\n        nowPlaying={nowPlaying}\r\n        upcoming={upcoming}\r\n        popular={popular}\r\n        error={error}\r\n        loading={loading}\r\n      />\r\n    );\r\n  }\r\n}\r\n","C:\\Users\\Bit\\Desktop\\bit-react\\bitflix\\src\\routes\\Search\\SearchContainer.js",["102","103"],"C:\\Users\\Bit\\Desktop\\bit-react\\bitflix\\src\\routes\\TV\\TvContainer.js",["104","105"],"import React from \"react\";\r\nimport TvPresenter from \"./TvPresenter\";\r\nimport { tvApi } from \"../../api\";\r\n\r\n// Container의 역할 : Application에서 사용되어지는 기능(함수), 상태(state), 이벤트 등을\r\n// 구현하고, Presenter에 전달\r\n\r\nexport default class extends React.Component {\r\n  // 클래스형 컴포넌트에서 state 만들기\r\n  state = {\r\n    topRated: null,\r\n    popular: null,\r\n    airingToday: null,\r\n    error: null,\r\n    loading: true,\r\n  };\r\n\r\n  // constructor : 클래스 생성자\r\n  //  생성자의 매개변수로 부모 컴포넌트의 props가 들어온다.\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n\r\n  // 컴포넌트가 부모 컴포넌트에 마운트 됐을 때 호출되는 함수\r\n  // useEffect(()=>(), [])와 같다.\r\n\r\n  // useEffect 에서의 비동기처리와는 다르게, 클래스형 컴포넌트의 componentDidMount에서의\r\n  // 비동기 처리는 앞에 async 키워드를 붙여주면 된다.\r\n  async componentDidMount() {\r\n    try {\r\n      // data -> results에 원하는 내용이 있었음\r\n      // data : { results : [{}, {}, {}, ...]}\r\n\r\n      // data안에 있는 results에 들어있는 값을 nowPlaying 변수에 넣겠다.\r\n      const {\r\n        data: { results: topRated },\r\n      } = await tvApi.topRated();\r\n\r\n      const {\r\n        data: { results: popular },\r\n      } = await tvApi.popular();\r\n      const {\r\n        data: { results: airingToday },\r\n      } = await tvApi.airingToday();\r\n      console.log(topRated);\r\n\r\n      this.setState({\r\n        topRated,\r\n        popular,\r\n        airingToday,\r\n      });\r\n    } catch (error) {\r\n      this.setState({\r\n        error: \"프로그램 정보를 찾을 수 없습니다.\",\r\n      });\r\n    } finally {\r\n      this.setState({\r\n        loading: false,\r\n      });\r\n    }\r\n  }\r\n\r\n  // 함수형 컴포넌트에서 return에 해당 된다.\r\n  render() {\r\n    const { topRated, popular, airingToday, error, loading } = this.state;\r\n\r\n    return (\r\n      <TvPresenter\r\n        topRated={topRated}\r\n        airingToday={airingToday}\r\n        popular={popular}\r\n        error={error}\r\n        loading={loading}\r\n      />\r\n    );\r\n  }\r\n}\r\n","C:\\Users\\Bit\\Desktop\\bit-react\\bitflix\\src\\routes\\Detail\\DetailContainer.js",["106"],"import React from \"react\";\r\nimport { moviesApi, tvApi } from \"../../api\";\r\nimport DetailPresenter from \"./DetailPresenter\";\r\n\r\nexport default class extends React.Component {\r\n  // 생성자에서 할 일\r\n  // 영화 상세 페이지를 표현해야 하는지 설정\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    const {\r\n      location: { pathname },\r\n    } = props;\r\n\r\n    this.state = {\r\n      result: null,\r\n      error: null,\r\n      loading: true,\r\n      isMovie: pathname.includes(\"/movie/\"),\r\n    };\r\n  }\r\n\r\n  async componentDidMount() {\r\n    // id 가지고 오기 -> match.params\r\n    // 만약에 id가 안들어오면 HOME으로 강제 이동 -> history의 push함수가 해준다.\r\n    // 사용자의 요청을 서버가 받고, 재요청 하도록 하는 것을 redirect라고 한다.\r\n\r\n    const {\r\n      match: {\r\n        params: { id },\r\n      },\r\n      history: { push },\r\n    } = this.props;\r\n\r\n    const { isMovie } = this.state;\r\n    const parsedId = parseInt(id);\r\n\r\n    // 올바르지 않은 id라면\r\n    if (isNaN(parsedId)) {\r\n      //Home으로 redirect\r\n      return push(\"/\");\r\n    }\r\n\r\n    let result = null;\r\n\r\n    try {\r\n      if (isMovie) {\r\n        ({ data: result } = await moviesApi.movieDetail(parsedId));\r\n      } else {\r\n        ({ data: result } = await tvApi.showDetail(parsedId));\r\n      }\r\n    } catch (error) {\r\n      this.setState({\r\n        error: \"아무것도 찾을 수가 없어요\",\r\n      });\r\n    } finally {\r\n      this.setState({ loading: false, result });\r\n    }\r\n  }\r\n\r\n  //함수형 컴포넌트에서 return에 해당된다.\r\n  render() {\r\n    const { result, error, loading } = this.state;\r\n\r\n    return <DetailPresenter result={result} error={error} loading={loading} />;\r\n  }\r\n}\r\n","C:\\Users\\Bit\\Desktop\\bit-react\\bitflix\\src\\routes\\Home\\HomePresenter.js",["107"],"import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport Helmet from \"react-helmet\";\r\n\r\nimport Section from \"../../components/Section\";\r\nimport Loader from \"../../components/Loader\";\r\nimport Message from \"../../components/Message\";\r\nimport Poster from \"../../components/Poster\";\r\n\r\nconst Container = styled.div`\r\n  padding: 20px;\r\n`;\r\n\r\n// Presentor의 역할 : Container으로 부터 받은 각종 이벤트나 상태 등을 화면에 적용 시키는 역할\r\nconst HomePresenter = ({ nowPlaying, upcoming, popular, error, loading }) => {\r\n  return (\r\n    <>\r\n      <Helmet>\r\n        <title>Movies | Bitflix</title>\r\n      </Helmet>\r\n      {loading ? (\r\n        <Loader />\r\n      ) : (\r\n        <Container>\r\n          {nowPlaying && nowPlaying.length > 0 && (\r\n            <Section title=\"현재 상영작\">\r\n              {nowPlaying.map((movie) => (\r\n                <Poster\r\n                  key={movie.id}\r\n                  id={movie.id}\r\n                  title={movie.original_title}\r\n                  imageUrl={movie.poster_path}\r\n                  rating={movie.vote_average}\r\n                  isMovie={true}\r\n                  year={\r\n                    movie.release_date && movie.release_date.substring(0, 4)\r\n                  }\r\n                />\r\n              ))}\r\n            </Section>\r\n          )}\r\n          {upcoming && upcoming.length > 0 && (\r\n            <Section title=\"상영 예정작\">\r\n              {upcoming.map((movie) => (\r\n                <Poster\r\n                  key={movie.id}\r\n                  id={movie.id}\r\n                  title={movie.original_title}\r\n                  imageUrl={movie.poster_path}\r\n                  rating={movie.vote_average}\r\n                  isMovie={true}\r\n                  year={\r\n                    movie.release_date && movie.release_date.substring(0, 4)\r\n                  }\r\n                />\r\n              ))}\r\n            </Section>\r\n          )}\r\n          {popular && popular.length > 0 && (\r\n            <Section title=\"인기 영화\">\r\n              {popular.map((movie) => (\r\n                <Poster\r\n                  key={movie.id}\r\n                  id={movie.id}\r\n                  title={movie.original_title}\r\n                  imageUrl={movie.poster_path}\r\n                  rating={movie.vote_average}\r\n                  isMovie={true}\r\n                  year={\r\n                    movie.release_date && movie.release_date.substring(0, 4)\r\n                  }\r\n                />\r\n              ))}\r\n            </Section>\r\n          )}\r\n\r\n          {}\r\n        </Container>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default HomePresenter;\r\n","C:\\Users\\Bit\\Desktop\\bit-react\\bitflix\\src\\routes\\TV\\TvPresenter.js",["108"],"import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport Helmet from \"react-helmet\";\r\n\r\nimport Section from \"../../components/Section\";\r\nimport Loader from \"../../components/Loader\";\r\nimport Message from \"../../components/Message\";\r\nimport Poster from \"../../components/Poster\";\r\n\r\nconst Container = styled.div`\r\n  padding: 20px;\r\n`;\r\n\r\n// Presentor의 역할 : Container으로 부터 받은 각종 이벤트나 상태 등을 화면에 적용 시키는 역할\r\nconst TvPresenter = ({ topRated, popular, airingToday, error, loading }) => {\r\n  return (\r\n    <>\r\n      <Helmet>\r\n        <title>TV | Bitflix</title>\r\n      </Helmet>\r\n      {loading ? (\r\n        <Loader />\r\n      ) : (\r\n        <Container>\r\n          {topRated && topRated.length > 0 && (\r\n            <Section title=\"탑 랭킹\">\r\n              {topRated.map((show) => (\r\n                <Poster\r\n                  key={show.id}\r\n                  id={show.id}\r\n                  title={show.original_name}\r\n                  imageUrl={show.poster_path}\r\n                  rating={show.vote_average}\r\n                  isMovie={false}\r\n                  year={\r\n                    show.first_air_date && show.first_air_date.substring(0, 4)\r\n                  }\r\n                />\r\n              ))}\r\n            </Section>\r\n          )}\r\n          {popular && popular.length > 0 && (\r\n            <Section title=\"인기 작품\">\r\n              {popular.map((show) => (\r\n                <Poster\r\n                  key={show.id}\r\n                  id={show.id}\r\n                  title={show.original_name}\r\n                  imageUrl={show.poster_path}\r\n                  rating={show.vote_average}\r\n                  isMovie={false}\r\n                  year={\r\n                    show.first_air_date && show.first_air_date.substring(0, 4)\r\n                  }\r\n                />\r\n              ))}\r\n            </Section>\r\n          )}\r\n          {airingToday && airingToday.length > 0 && (\r\n            <Section title=\"오늘 방영작\">\r\n              {airingToday.map((show) => (\r\n                <Poster\r\n                  key={show.id}\r\n                  id={show.id}\r\n                  title={show.original_name}\r\n                  imageUrl={show.poster_path}\r\n                  rating={show.vote_average}\r\n                  isMovie={false}\r\n                  year={\r\n                    show.first_air_date && show.first_air_date.substring(0, 4)\r\n                  }\r\n                />\r\n              ))}\r\n            </Section>\r\n          )}\r\n\r\n          {}\r\n        </Container>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default TvPresenter;\r\n","C:\\Users\\Bit\\Desktop\\bit-react\\bitflix\\src\\routes\\Search\\SearchPresenter.js",[],"C:\\Users\\Bit\\Desktop\\bit-react\\bitflix\\src\\routes\\Detail\\DetailPresenter.js",[],"C:\\Users\\Bit\\Desktop\\bit-react\\bitflix\\src\\api.js",[],"C:\\Users\\Bit\\Desktop\\bit-react\\bitflix\\src\\components\\Section.js",[],"C:\\Users\\Bit\\Desktop\\bit-react\\bitflix\\src\\components\\Message.js",[],"C:\\Users\\Bit\\Desktop\\bit-react\\bitflix\\src\\components\\Poster.js",[],"C:\\Users\\Bit\\Desktop\\bit-react\\bitflix\\src\\components\\Loader.js",[],{"ruleId":"109","replacedBy":"110"},{"ruleId":"111","replacedBy":"112"},{"ruleId":"113","severity":1,"message":"114","line":10,"column":1,"nodeType":"115","endLine":26,"endColumn":3},{"ruleId":"113","severity":1,"message":"116","line":8,"column":1,"nodeType":"115","endLine":76,"endColumn":2},{"ruleId":"117","severity":1,"message":"118","line":20,"column":3,"nodeType":"119","messageId":"120","endLine":22,"endColumn":4},{"ruleId":"113","severity":1,"message":"116","line":5,"column":1,"nodeType":"115","endLine":90,"endColumn":2},{"ruleId":"117","severity":1,"message":"118","line":68,"column":3,"nodeType":"119","messageId":"120","endLine":70,"endColumn":4},{"ruleId":"113","severity":1,"message":"116","line":8,"column":1,"nodeType":"115","endLine":77,"endColumn":2},{"ruleId":"117","severity":1,"message":"118","line":20,"column":3,"nodeType":"119","messageId":"120","endLine":22,"endColumn":4},{"ruleId":"113","severity":1,"message":"116","line":5,"column":1,"nodeType":"115","endLine":67,"endColumn":2},{"ruleId":"121","severity":1,"message":"122","line":7,"column":8,"nodeType":"123","messageId":"124","endLine":7,"endColumn":15},{"ruleId":"121","severity":1,"message":"122","line":7,"column":8,"nodeType":"123","messageId":"124","endLine":7,"endColumn":15},"no-native-reassign",["125"],"no-negated-in-lhs",["126"],"import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","Unexpected default export of anonymous class","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","no-unused-vars","'Message' is defined but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]